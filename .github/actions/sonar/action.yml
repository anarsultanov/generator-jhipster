#
# Copyright 2013-2024 the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: 'SonarQube PR Analysis'
description: 'A GitHub Action to perform SonarQube analysis on a PR with caching and metrics retrieval.'

inputs:
  sonar_project_key:
    description: 'SonarQube project key'
    required: true
  workdir:
    description: 'Working directory for the action'
    required: false
    default: '.'

runs:
  using: composite
  steps:
    - name: 'Create cache directory and copy files'
      if: github.ref == 'refs/heads/main'
      shell: bash
      run: |
        mkdir -p ./${{ inputs.sonar_project_key }}-cached
        cp -r ${{ inputs.workdir }}/. ./${{ inputs.sonar_project_key }}-cached/

    - name: 'Cache copied project (main)'
      if: github.ref == 'refs/heads/main'
      uses: actions/cache@v4
      with:
        path: ./${{ inputs.sonar_project_key }}-cached
        key: cache-${{ inputs.sonar_project_key }}-${{ github.sha }}

    - name: 'Restore project cache to specific directory'
      if: github.event_name == 'pull_request'
      id: restore-cache
      uses: actions/cache@v4
      with:
        path: ./${{ inputs.sonar_project_key }}-cached
        key: cache-${{ inputs.sonar_project_key }}-${{ github.event.pull_request.base.sha }}
        restore-keys: |
          cache-${{ inputs.sonar_project_key }}-

    - name: 'Set up separate Git directory'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Create a separate directory for the Git repository
        mkdir -p ./git-repo
        cd ./git-repo

        

        # Copy files from the cached directory (main branch)
        cp -r ../${{ inputs.sonar_project_key }}-cached/. .

        rm -rf .git
        # Initialize a new Git repository
        git init
        git config user.name "GitHub Action"
        git config user.email "action@github.com"

        # Add and commit the initial state (main branch)
        git add -A

        # Check the Git status to verify all files are tracked
        echo "Git status before initial commit:"
        git status

        git commit -m "Initial commit from main branch"

    - name: 'Check file content before PR changes'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Check the content of the specific file before PR changes are applied
        cd ./git-repo
        echo "File content before PR changes:"
        cat ./src/main/java/tech/jhipster/sample/security/SpringSecurityAuditorAware.java || echo "File not found"

    - name: 'Remove all files except .git before copying PR changes'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Ensure we are in the separate Git directory
        cd ./git-repo

        # Remove all files except the .git directory
        find . -mindepth 1 -not -path "./.git*" -delete

    - name: 'Copy PR files to Git directory'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Copy files from the workdir to the Git directory
        cp -r ${{ inputs.workdir }}/. .

    - name: 'Check file content after PR changes'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Check the content of the specific file after PR changes are applied
        cd ./git-repo
        echo "File content after PR changes:"
        cat ./src/main/java/tech/jhipster/sample/security/SpringSecurityAuditorAware.java || echo "File not found"

    - name: 'Check for changes and commit PR files'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Change to the Git directory
        cd ./git-repo

        # Clean and reset Git to ensure a clean working directory
        git reset --hard HEAD
        git clean -fdx  # Remove untracked files and directories
        git rm -r --cached .  # Remove all files from the index

        # Add and commit the PR changes
        git add -A
        echo "Changed files:"
        git status --short
        git commit -m "Apply changes from PR branch"
