#
# Copyright 2013-2024 the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: 'SonarQube PR Analysis'
description: 'A GitHub Action to perform SonarQube analysis on a PR with caching and metrics retrieval.'

inputs:
  sonar_project_key:
    description: 'SonarQube project key'
    required: true
  workdir:
    description: 'Working directory for the action'
    required: false
    default: '.'

runs:
  using: composite
  steps:
    - name: 'Create cache directory and copy files'
      if: github.ref == 'refs/heads/main'
      shell: bash
      run: |
        mkdir -p ./cached-project
        cp -r ${{ inputs.workdir }}/. ./cached-project/

    - name: 'Cache copied project (main)'
      if: github.ref == 'refs/heads/main'
      uses: actions/cache@v4
      with:
        path: ./cached-project
        key: project-cache-${{ github.sha }}

    - name: 'Restore project cache to specific directory'
      if: github.event_name == 'pull_request'
      id: restore-cache
      uses: actions/cache@v4
      with:
        path: ./cached-project
        key: project-cache-${{ github.event.pull_request.base.sha }}
        restore-keys: |
          project-cache-

    - name: 'Install jq'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: sudo apt-get install -y jq

    - name: 'Start SonarQube'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        docker run -d --name sonar-server -p 9000:9000 mc1arke/sonarqube-with-community-branch-plugin:latest
        until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
          echo "Waiting for SonarQube to start..."
          sleep 5
        done

    - name: 'Create SonarQube project'
      shell: bash
      run: |
        curl -s -u admin:admin -X POST "http://localhost:9000/api/projects/create?name=${{ inputs.sonar_project_key }}&project=${{ inputs.sonar_project_key }}" || true

    - name: 'Run SonarQube on main (cached)'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        cd cached-project
        ls -la
        ./mvnw -ntp --batch-mode initialize org.jacoco:jacoco-maven-plugin:prepare-agent sonar:sonar \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.projectKey=${{ inputs.sonar_project_key }} \
          -Dsonar.login=admin \
          -Dsonar.password=admin \
          -Dsonar.qualitygate.wait=true

    - name: 'Run SonarQube on PR'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        cd ${{ inputs.workdir }}
        ls -la
        ./mvnw -ntp --batch-mode initialize org.jacoco:jacoco-maven-plugin:prepare-agent sonar:sonar \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.projectKey=${{ inputs.sonar_project_key }} \
          -Dsonar.login=admin \
          -Dsonar.password=admin \
          -Dsonar.qualitygate.wait=true \
          -Dsonar.pullrequest.key=${{github.event.pull_request.number}} \
          -Dsonar.pullrequest.branch=${{github.head_ref}} \
          -Dsonar.pullrequest.base=${{github.base_ref}}

    - name: 'Retrieve PR metrics'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        sonar_response=$(curl -s -u admin:admin \
        "http://localhost:9000/api/measures/component?component=${{ inputs.sonar_project_key }}&pullRequest=${{ github.event.pull_request.number }}&metricKeys=new_bugs,new_vulnerabilities,new_code_smells,new_coverage,new_duplicated_lines_density")

        echo "SonarQube Analysis response: $sonar_response"

        error=$(echo $sonar_response | jq -r .errors)
        measures_length=$(echo "$sonar_response" | jq '.component.measures | length')

        if [[ $error == null && $measures_length -gt 0 ]]; then
          success=true
        else
          echo "Failed to get Sonar analysis results."
          exit 1
        fi

        measure () {
          echo "$sonar_response" | jq -r .component | jq -r .measures | jq '[.[]|select(.metric=="'$1'")][0]' | jq -r .value
        }

        new_vul=$(measure "new_vulnerabilities")
        new_cov=$(measure "new_coverage")
        new_bug=$(measure "new_bugs")
        new_dup=$(measure "new_duplicated_lines_density")
        new_csm=$(measure "new_code_smells")

        echo "----- SonarQube PR Analysis Results -----"
        echo "  New Coverage:          ${new_cov:-N/A}%"
        echo "  New Vulnerabilities:   ${new_vul:-N/A}"
        echo "  New Bugs:              ${new_bug:-N/A}"
        echo "  New Duplication:       ${new_dup:-N/A}%"
        echo "  New Code smells:       ${new_csm:-N/A}"
        echo "-----------------------------------------"

        fail () {
          echo
          echo 'Listing all unresolved issues:'
          curl -s -u admin:admin \
          "http://localhost:9000/api/issues/search?componentKeys=${{ inputs.sonar_project_key }}&resolved=false&pullRequest=${{ github.event.pull_request.number }}" | \
          jq -r '.issues[] | "File: \(.component) Line: \(.line)\n  [\(.rule)] \(.message)\n"'
          exit 1
        }

        if [[ $new_vul != "0" && $new_vul != "" ]]; then
          echo "SonarQube PR Analysis failed -> New vulnerabilities found"
          fail
        fi

        if [[ $new_bug != "0" && $new_bug != "" ]]; then
          echo "SonarQube PR Analysis failed -> New bugs found"
          fail
        fi

        if [[ $new_dup != "0.0" && $new_dup != "" ]]; then
          echo "SonarQube PR Analysis failed -> New code duplication found"
          fail
        fi

        if [[ $new_csm != "0" && $new_csm != "" ]]; then
          echo "SonarQube PR Analysis failed -> New code smells found"
          fail
        fi

        echo "SonarQube PR Analysis passed successfully."

    - name: 'Stop SonarQube'
      if: github.event_name == 'pull_request' && steps.restore-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        docker stop sonar-server
        docker rm sonar-server
